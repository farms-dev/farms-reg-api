'use strict'
const express = require('express')
// const ApolloServer = require('apollo-server-express')
const { ApolloServer } = require('apollo-server-express')

// const { typeDefs, resolvers } = require('./data/schema')
const typeDefs = require('./data/schema')
const resolvers = require('./data/resolvers')
const fs = require('fs')
const https = require('https')
const http = require('http')

const configurations = {
  // Note: You may need sudo to run on port 443
  production: { ssl: true, port: 443, hostname: 'example.com' },
  development: { ssl: false, port: 4000, hostname: 'localhost' }
}

const environment = process.env.NODE_ENV || 'production'
const config = configurations[environment]

const apollo = new ApolloServer({ typeDefs, resolvers })

const app = express()
apollo.applyMiddleware({ app })

// Create the HTTPS or HTTP server, per configuration
var server
if (config.ssl) {
  // Assumes certificates are in .ssl folder from package root. Make sure the files
  // are secured.
  server = https.createServer(
    {
      key: fs.readFileSync(`./ssl/server.key`),
      cert: fs.readFileSync(`./ssl/server.cert`)
    },
    app
  )
} else {
  server = http.createServer(app)
}

// Add subscription support
apollo.installSubscriptionHandlers(server)

server.listen({ port: config.port }, () =>
  console.log(
    'ðŸš€ Server ready at',
    `http${config.ssl ? 's' : ''}://${config.hostname}:${config.port}${apollo.graphqlPath}`
  )
)

/* const cors = require('cors')
const bodyParser = require('body-parser')
const { graphqlExpress, graphiqlExpress } = require('apollo-server-express')
const fs = require('fs')
const https = require('https')
require('dotenv').config()

// const PORT = 4000

const app = express()
app.use('*', cors({ origin: process.env.ORIGIN }))
app.use('/api', bodyParser.json(), graphqlExpress({ schema }))
app.use('/graphiql', graphiqlExpress({ endpointURL: 'api' }))

// app.listen(process.env.PORT || PORT, () => {
//  console.log(`GraphiQL is running on .../graphiql`)
//  console.log(process.env.ORIGIN)
// })

var server
server = https.createServer(
  {
    key: fs.readFileSync(`./ssl/server.key`),
    cert: fs.readFileSync(`./ssl/server.cert`)
  },
  app
)

server.listen({ port: process.env.PORT }, () =>
  console.log(
    'ðŸš€ Server ready at',
    `http${process.env.SSL ? 's' : ''}:/graphiql`
  )
) */
